package samples;

import java.util.Random;
import java.util.Scanner;

import static java.lang.System.in;
import static java.lang.System.out;

/*
 *
 *  Below is an attempt to illustrate the "smallest step" tactic by implementing the Nim-game in versions.
 *  For Nim , see See https://en.wikipedia.org/wiki/Nim.
 *  Each "step" is written in a method to make it possible to trace. No other methods used for now
 *
 *  Smallest step means:
 *  - When starting out, just implement the smallest possible part that
 *    help us move in the direction of the solution.
 *  - Wait with loops, checks, special cases etc.
 *  - When smallest possible works: Implement "next smallest" step, run to test, etc.
 *  - Any program should always be possible to run
 *
 */
public class SmallestStepNim {

    public static void main(String[] args) {
        new SmallestStepNim().program();
    }

    ;    // rand is a random generator, possible to get random numbers.
    final Scanner sc = new Scanner(in);
    program ()
    {


    }
   while (true) {

    }



    void jodda() {

    }
}